import { StyleSheet, Text, View, TextInput, Image, TouchableOpacity,ActivityIndicator } from 'react-native'
import React, { useEffect, useState } from 'react'
import LinearGradient from 'react-native-linear-gradient';
import { useNavigation, useRoute } from '@react-navigation/native';
import auth from '@react-native-firebase/auth';
import firestore from '@react-native-firebase/firestore';
import Ionicons from 'react-native-vector-icons/dist/Ionicons';


const Otp = () => {
  const route= useRoute();
  const {
   
    email,
    password,
    phonenumber,
    username,
  } = route.params;

  const navigation = useNavigation();
  const [loading,setLoading]=useState(false);
  const [ confirm,setConfirm]=useState();

  const [otp,setOtp]=useState();
useEffect(()=>{
  const sendOTP = async () => {
    try {
      //setLoading(true)
       const confirmation = await auth().signInWithPhoneNumber(`+91${phonenumber}`);
      // setVerificationId(confirmation.verificationId);
      // console.log(confirmation.verificationId);
      // navigation.navigate('Otp',{confirmation:confirmation, email:Email,password:password,
      // phonenumber:phonenumber,username:username});
      setConfirm(confirmation)
     // setLoading(false);
    } catch (error) {
      console.error('OTP sending error:', error.message);
      alert("Enter valid number")
      setLoading(false);
    }
  };
  sendOTP();
},[]);
async function confirmCode() {
  try {
    const data = await confirm.confirm(otp);
    console.log(data);
    const uid = data.user.uid;
    firestore()
    .collection('Users')
    .doc(`+91${phonenumber}`) // Use the UID as the document ID in Firestore
    .set({
   
      phonenumber: phonenumber,
      email: email,
      username: username,
      password: password,
    })
    .then(() => {
      console.log('User added to Firestore!');
      
      // Navigate to the 'Otp' screen after successful user creation and data addition
      navigation.navigate('Login');
    })
    .catch(error => {
      console.error('Error adding user to Firestore:', error.message);
    });
    
    navigation.navigate("/Login")
  } catch (error) {
    console.log('error:',error.message);
    alert("Invalid Code  ")
  }
}


  const verifyOTP = async () => {
    try {
      //const credential = auth.PhoneAuthProvider.credential(verificationId, otp);
      // let userData = await auth().currentUser
      // if(userData){
      //   await userData.linkWithCredential(credential);

      //   console.log('OTP verification and linking successful');
      //  // SendData();
  
      // }

      // await firebase.auth().signInWithCredential(credential);
      //const userCredential = await auth().signInWithCredential(credential);


      console.log('User signed in and linked with OTP credential',userCredential);
      //SendData();
    
      // Navigate to authenticated screen or perform other actions
    } catch (error) {
      console.error('OTP verification error:', error.message);
    }
  };
  const SendData = async () => {
    try {
      if (email && password) {
        // Create a new user with the provided email and password
        const { user } = await auth().createUserWithEmailAndPassword(email, password);
        
        const uid = user.uid; // Get the UID generated by Firebase Authentication
        
        // Add user data to Firestore using the same UID
        firestore()
          .collection('Users')
          .doc(uid) // Use the UID as the document ID in Firestore
          .set({
         
            phonenumber: phonenumber,
            email: email,
            username: username,
            password: password,
          })
          .then(() => {
            console.log('User added to Firestore!');
            
            // Navigate to the 'Otp' screen after successful user creation and data addition
            navigation.navigate('Login');
          })
          .catch(error => {
            console.error('Error adding user to Firestore:', error.message);
          });
  
        console.log('User signed up:', auth().currentUser);
        alert("Regsitered Successfully")
      }
    } catch (error) {
      console.error('Email sign-up error:', error.message);
      alert(error.message)
    }
  };


  const gotobotttombar = ()=>{
    navigation.navigate("BottomBar");
  }
  return (
    <View style={{flex:1}}>
      <LinearGradient colors={['#000', '#154015','#154015','#154015', '#154015','#000','#000']} style={{flex:1}}>
      <View style={styles.Box}>
        <Text style={styles.OTPHeading}>
        OTP Authentication
        </Text>
        <Text style={styles.ForgetText}> We have sent a code to</Text>
        <Text style={styles.NumberText}>{`+91${phonenumber}`}</Text>
        <Text style={[styles.ForgetText,{width:250,marginHorizontal:30}]}>Please enter OTP which has been sent to your Phone</Text>
        <View style={styles.TextInputBox}>
          <TextInput
          placeholder='Enter OTP '
          placeholderTextColor={'#878A8B'}
          style={{color:'white'}}
          value={otp}
          onChangeText={(e)=>setOtp(e)}
          />
        </View>
        
        <TouchableOpacity ><Text style={[styles.ForgetText,{color:'#86D957', fontWeight:'bold', textAlign:'right',marginRight:20}]}>Resend</Text></TouchableOpacity>
        <TouchableOpacity onPress={confirmCode} style={styles.LoginButton}>
          {loading?<ActivityIndicator/>:<Text style={styles.LoginButtonText}>Create My Account</Text>}
        </TouchableOpacity>

      </View>
      </LinearGradient>
    </View>
  )
}

export default Otp

const styles = StyleSheet.create({
  Box:{
    marginLeft:20,
    marginTop:140,
    backgroundColor:'black',
    borderRadius:40,
    width:320,
    height:400
  },
  OTPHeading:{
    color:'white',
    marginLeft:25,
    marginTop:30,
    fontSize:22,
    fontWeight:'bold',
    textAlign:'center'
  },
  TextInputBox:{
    backgroundColor:'#33363A',
    marginHorizontal:20,
    borderRadius:20,
    marginTop:40,
    paddingHorizontal:15,
  },
  IconBox:{
    marginTop:15,
    marginHorizontal:50,
    backgroundColor:"#0D1D12",
    width:50,
    alignItems:'center',
    justifyContent:'center',
    borderRadius:10
  },
  ForgetText:{
    color:'#ffffff',
    textAlign:'center',
    fontSize:12,
    fontWeight:'300',
    marginTop:15
  },
  NumberText:{
    color:'#ffffff',
    textAlign:'center',
    fontSize:18,
    fontWeight:'700',
    marginTop:8
  },
  LoginButton:{
    backgroundColor:'#436A2E',
    paddingHorizontal:20,
    paddingVertical:10,
    alignItems:'center',
    width:250,
    marginLeft:38,
    borderRadius:20,
    marginTop:15
  },
  LoginButtonText:{
    color:'white',
    fontSize:18,
    fontWeight:'bold'
  }
})